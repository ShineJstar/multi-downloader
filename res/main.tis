include "libs/vlist.tis";

include "export.tis";
include "runtime/runtime.tis";
include "utils/utils.tis";

var EXIT_FLAG = false;  // 窗口退出标志
var IS_DEBUG = false;


self.ready = function() {
    var meta = runtime.appmeta;

    IS_DEBUG = meta.is_debug;
    $(aside .title).text = meta.appname;
    view.windowIcon = self.url("assets/img/icon.png");
    view.trayIcon({
        image: self.loadImage(self.url("assets/img/icon.png")),
        text: meta.appname,
    });
    utils.centerWindow();
}

class MainController : Element
{
    var currentRoute = "";

    function attached() {
        this.route($(aside li[href]:first-child).attributes["href"]);
    }

    function route(topage) {
        if (currentRoute != topage) {
            var v = $(#view);
            v.update(::v.load(self.url(topage)));
            currentRoute = topage;
            this.postEvent("routechange", topage);
        }
    }

    // route change
    event click $(aside li[href]) (evt,e) { 
        for (var li in $$(aside li[href])) {
            li.attributes.removeClass("active");
        };
        e.attributes.addClass("active");

        this.route(e.attributes["href"]); 
    }

    event toast (evt,e) { $(#notify).add({title:evt.data.type, message:evt.data.msg, type:evt.data.type}); }

    event notify-task (evt,e) {
        View.window({
            type: View.POPUP_WINDOW,
            caption: "notify",
            url:self.url("components/window-task-finish.htm"),
            parameters: evt.data,
        }); 
    }

    event exit-app { EXIT_FLAG = true; view.close() }
}

event closerequest (evt) {
    if (EXIT_FLAG === true || IS_DEBUG) {
        return true;
    } else {
        evt.cancel = true;
        var mode = runtime.appconfig.exit_mode;
        if (mode === "notset") {
            var rem = false;
            var r = view.msgbox({
                type: #question,
                title: "提示",
                content: "<p>你点击了关闭按钮，是想要？</p><small><button|checkbox#rem>记住我的选择</button></small>",
                buttons: [
                    {id:#tray, text:"最小化"},
                    {id:#exit, text:"关闭", role:"default-button"},
                ],
                onClose: function(root,e) { rem = root.$(#rem).value; },
            });
            if (rem) {
                var conf = runtime.appconfig;
                conf.exit_mode = r;
                runtime.postEvent("config-changed", conf);
            }
            if (r == #tray) {
                view.windowState = View.WINDOW_HIDDEN;
            } else if (r == #exit) {
                runtime.postEvent("close-request");
            }
        } else if (mode === "tray") {
            view.windowState = View.WINDOW_HIDDEN;
        } else if (mode === "exit") {
            runtime.postEvent("close-request");
        }
    }
}

view << event trayicon-click (evt) {
    if (evt.buttons == 1) {  // left mouse button
        if (view.windowState in [View.WINDOW_SHOWN, View.WINDOW_MAXIMIZED]) {
            view.windowState = View.WINDOW_HIDDEN;
        } else if (view.windowState == View.WINDOW_HIDDEN) {
            view.windowState = View.WINDOW_SHOWN;
            view.windowTopmost = true;
            view.windowTopmost = false;
        } else if (view.windowState == View.WINDOW_MINIMIZED) {
            view.windowState = View.WINDOW_SHOWN;
        }

    } else if (evt.buttons == 2) {  // right mouse button
        var (sx,sy) = view.box(#position,#client,#screen);
        self.popup($(menu#tray), 2, evt.x - sx, evt.y - sy);
    }
}

event click $(menu#tray > li#show-window) {
    if (view.windowState in [View.WINDOW_HIDDEN, View.WINDOW_MINIMIZED]) {
        view.windowState = View.WINDOW_SHOWN;
        view.windowTopmost = true;
        view.windowTopmost = false;
    }
}

event click $(menu#tray > li#exit-app) { EXIT_FLAG = true; view.close(); }
